#r "..\..\..\Store.Domain\bin\Debug\netcoreapp2.2\Store.Domain.dll"

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

Output.BuildAction = BuildAction.None;
Output.SetExtension(".cs");
Output.WriteLine($@"//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//<auto-generated>
//  This code was generated by a tool
//  Runtime Version: { Environment.Version.ToString() }
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//</auto-generated>
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
using System;
using System.CodeDom.Compiler;

namespace Store.Tests.Unit.Framework.Builders
{{
{ BuildTypes() }
}}");

private string BuildTypes()
{
    var output = new StringBuilder();

    try
    {
        var modelType = typeof(Store.Domain.Framework.Model);
        var modelAssembly = modelType.Assembly;
        IEnumerable<Type> modelAssemblyTypes;

        try
        {
            modelAssemblyTypes = modelAssembly.DefinedTypes;
        }
        catch (ReflectionTypeLoadException ex)
        {
            modelAssemblyTypes = ex.Types.Where(x => x != null).ToList();
        }

        var modelTypes = modelAssemblyTypes
            .Where(t => !t.IsGenericTypeDefinition && !t.IsAbstract && modelType.IsAssignableFrom(t))
            .OrderBy(t => t.Name)
            .ToList();

        foreach (var type in modelTypes)
        {
            var typeName = type.Name;
            var typeFullName = type.FullName;
            var builderName = $"{typeName}Builder";
            var properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(x => x.CanWrite)
                .OrderBy(x => x.Name)
                .ToList();

            output.AppendLine($@"
    [GeneratedCode(""Builders"", ""1.0"")]
    public partial class {builderName} : Builder<{typeFullName}>
    {{
    }}");
        }
    }
    catch (Exception ex)
    {
        return $"// {ex.ToString()}";
    }

    return output.ToString();
}
