// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Domain.Models;

namespace Store.Domain.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20190414163010_Require Country on State")]
    partial class RequireCountryonState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Store.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("DeletedById");

                    b.Property<DateTime?>("DeletedUtc");

                    b.Property<string>("Line1")
                        .HasMaxLength(50);

                    b.Property<string>("Line2")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Anytown",
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Line1 = "Billing Dept.",
                            Line2 = "123 Any St.",
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "12345",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Anytown",
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Line1 = "Receiving Dept.",
                            Line2 = "123 Any St.",
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "12345",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Men's",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Women's",
                            ParentCategoryId = 1
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PostalCodeLabel")
                        .HasMaxLength(50);

                    b.Property<string>("StateLabel")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "USA",
                            Description = "The United States of America",
                            Name = "The United States of America",
                            PostalCodeLabel = "PostalCode",
                            StateLabel = "State"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "CAN",
                            Description = "Canada",
                            Name = "Canada",
                            PostalCodeLabel = "Postal Code",
                            StateLabel = "Province/Territory"
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingAddressId");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int>("OrderStatusId");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddressId = 1,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 4,
                            ShippingAddressId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BillingAddressId = 1,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 3,
                            ShippingAddressId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BillingAddressId = 1,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 2,
                            ShippingAddressId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BillingAddressId = 1,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 1,
                            ShippingAddressId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(10, 2)");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            Price = 1.00m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            Price = 1.00m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 2,
                            Price = 1.00m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 2,
                            Price = 1.00m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 3,
                            Price = 1.00m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 3,
                            Price = 1.00m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 4,
                            Price = 1.00m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 4,
                            Price = 1.00m,
                            ProductId = 2,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Order has been received, but not yet processed.",
                            Name = "Received"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Order has been processed, but not yet shipped.",
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Order is in the process of being shipped.",
                            Name = "Shipping"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Order has been shipped.",
                            Name = "Shipped"
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("DeletedById");

                    b.Property<DateTime?>("DeletedUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(10, 2)");

                    b.Property<int>("ProductStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductStatusId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A men's t-shirt",
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "T-Shirt",
                            Price = 1.00m,
                            ProductStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A wommen's t-shirt",
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "T-Shirt",
                            Price = 2.00m,
                            ProductStatusId = 1
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProductStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Product is available to order.",
                            Name = "In-Stock"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Product can be ordered, but delivery time is unknown.",
                            Name = "Back-Ordered"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Product is unavailable for ordering.",
                            Name = "Discontinued"
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<int>("CountryId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "AL",
                            CountryId = 1,
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "AK",
                            CountryId = 1,
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "AZ",
                            CountryId = 1,
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "AR",
                            CountryId = 1,
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "CA",
                            CountryId = 1,
                            Name = "California"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "CO",
                            CountryId = 1,
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "CT",
                            CountryId = 1,
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "DE",
                            CountryId = 1,
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "FL",
                            CountryId = 1,
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "GA",
                            CountryId = 1,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "HI",
                            CountryId = 1,
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "ID",
                            CountryId = 1,
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "IL",
                            CountryId = 1,
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "IN",
                            CountryId = 1,
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "IA",
                            CountryId = 1,
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "KS",
                            CountryId = 1,
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = 17,
                            Abbreviation = "KY",
                            CountryId = 1,
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = 18,
                            Abbreviation = "LA",
                            CountryId = 1,
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = 19,
                            Abbreviation = "ME",
                            CountryId = 1,
                            Name = "Maine"
                        },
                        new
                        {
                            Id = 20,
                            Abbreviation = "MD",
                            CountryId = 1,
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = 21,
                            Abbreviation = "MA",
                            CountryId = 1,
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = 22,
                            Abbreviation = "MI",
                            CountryId = 1,
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = 23,
                            Abbreviation = "MN",
                            CountryId = 1,
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = 24,
                            Abbreviation = "MS",
                            CountryId = 1,
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = 25,
                            Abbreviation = "MO",
                            CountryId = 1,
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = 26,
                            Abbreviation = "MT",
                            CountryId = 1,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 27,
                            Abbreviation = "NE",
                            CountryId = 1,
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = 28,
                            Abbreviation = "NV",
                            CountryId = 1,
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = 29,
                            Abbreviation = "NH",
                            CountryId = 1,
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = 30,
                            Abbreviation = "NJ",
                            CountryId = 1,
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 31,
                            Abbreviation = "NM",
                            CountryId = 1,
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = 32,
                            Abbreviation = "NY",
                            CountryId = 1,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 33,
                            Abbreviation = "NC",
                            CountryId = 1,
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = 34,
                            Abbreviation = "ND",
                            CountryId = 1,
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = 35,
                            Abbreviation = "OH",
                            CountryId = 1,
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = 36,
                            Abbreviation = "OK",
                            CountryId = 1,
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = 37,
                            Abbreviation = "OR",
                            CountryId = 1,
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 38,
                            Abbreviation = "PA",
                            CountryId = 1,
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = 39,
                            Abbreviation = "RI",
                            CountryId = 1,
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = 40,
                            Abbreviation = "SC",
                            CountryId = 1,
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = 41,
                            Abbreviation = "SD",
                            CountryId = 1,
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = 42,
                            Abbreviation = "TN",
                            CountryId = 1,
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = 43,
                            Abbreviation = "TX",
                            CountryId = 1,
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 44,
                            Abbreviation = "UT",
                            CountryId = 1,
                            Name = "Utah"
                        },
                        new
                        {
                            Id = 45,
                            Abbreviation = "VT",
                            CountryId = 1,
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 46,
                            Abbreviation = "VA",
                            CountryId = 1,
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = 47,
                            Abbreviation = "WA",
                            CountryId = 1,
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 48,
                            Abbreviation = "WV",
                            CountryId = 1,
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = 49,
                            Abbreviation = "WI",
                            CountryId = 1,
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = 50,
                            Abbreviation = "WY",
                            CountryId = 1,
                            Name = "Wyoming"
                        },
                        new
                        {
                            Id = 51,
                            Abbreviation = "DC",
                            CountryId = 1,
                            Name = "District of Columbia"
                        },
                        new
                        {
                            Id = 52,
                            Abbreviation = "AS",
                            CountryId = 1,
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 53,
                            Abbreviation = "GU",
                            CountryId = 1,
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 54,
                            Abbreviation = "MP",
                            CountryId = 1,
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 55,
                            Abbreviation = "PR",
                            CountryId = 1,
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 56,
                            Abbreviation = "VI",
                            CountryId = 1,
                            Name = "U.S. Virgin Islands"
                        },
                        new
                        {
                            Id = 57,
                            Abbreviation = "AB",
                            CountryId = 2,
                            Name = "Alberta"
                        },
                        new
                        {
                            Id = 58,
                            Abbreviation = "BC",
                            CountryId = 2,
                            Name = "British Columbia"
                        },
                        new
                        {
                            Id = 59,
                            Abbreviation = "MB",
                            CountryId = 2,
                            Name = "Manitoba"
                        },
                        new
                        {
                            Id = 60,
                            Abbreviation = "NB",
                            CountryId = 2,
                            Name = "New Brunswick"
                        },
                        new
                        {
                            Id = 61,
                            Abbreviation = "NL",
                            CountryId = 2,
                            Name = "Newfoundland and Labrador"
                        },
                        new
                        {
                            Id = 62,
                            Abbreviation = "NS",
                            CountryId = 2,
                            Name = "Nova Scotia"
                        },
                        new
                        {
                            Id = 63,
                            Abbreviation = "ON",
                            CountryId = 2,
                            Name = "Ontario"
                        },
                        new
                        {
                            Id = 64,
                            Abbreviation = "PE",
                            CountryId = 2,
                            Name = "Prince Edward Island"
                        },
                        new
                        {
                            Id = 65,
                            Abbreviation = "QC",
                            CountryId = 2,
                            Name = "Quebec"
                        },
                        new
                        {
                            Id = 66,
                            Abbreviation = "SK",
                            CountryId = 2,
                            Name = "Saskatchewan"
                        },
                        new
                        {
                            Id = 67,
                            Abbreviation = "NT",
                            CountryId = 2,
                            Name = "Northwest Territories"
                        },
                        new
                        {
                            Id = 68,
                            Abbreviation = "NU",
                            CountryId = 2,
                            Name = "Nunavut"
                        },
                        new
                        {
                            Id = 69,
                            Abbreviation = "YT",
                            CountryId = 2,
                            Name = "Yukon"
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("DeletedById");

                    b.Property<DateTime?>("DeletedUtc");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("DateTime2");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "System",
                            LastName = "Admin",
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = "",
                            PhoneNumber = "987-654-3210",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Customer",
                            MiddleName = "Q",
                            ModifiedById = 1,
                            ModifiedUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = "",
                            PhoneNumber = "987-654-3210",
                            UserName = "customer"
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.Address", b =>
                {
                    b.HasOne("Store.Domain.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.Domain.Models.Category", b =>
                {
                    b.HasOne("Store.Domain.Models.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("Store.Domain.Models.Order", b =>
                {
                    b.HasOne("Store.Domain.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Store.Domain.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.Domain.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("Store.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("Store.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.Domain.Models.Product", b =>
                {
                    b.HasOne("Store.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.Domain.Models.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.Domain.Models.State", b =>
                {
                    b.HasOne("Store.Domain.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.Domain.Models.User", b =>
                {
                    b.HasOne("Store.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
